{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const dataSlice = createSlice({\n  name: 'data',\n  initialState: {\n    fish: [],\n    status: 'idle',\n    error: null //  bugs: [],\n    //  seaCreatures: []\n\n  },\n  reducers: {\n    setFishData: state => {\n      const fishURL = 'https://acnhapi.com/v1/fish';\n      const fishReq = axios.get(fishURL);\n      fishReq.then(res => {\n        console.log(res);\n        state.fish = res.data;\n      });\n    },\n    getFishData: state => {\n      return state.fish;\n    }\n    /*   setBugData: (state) => {\n           const bugURL = 'https://acnhapi.com/v1/bugs';\n           const bugReq = axios.get(bugURL);\n           bugReq.then(res => {\n               console.log(res);\n               state.bugs = res.data;\n           });\n       },\n       getBugData: (state) => {\n           return state.bugs\n       },\n       setSeaCreaturesData: (state) => {\n           const seaURL = 'https://acnhapi.com/v1/sea';\n           const seaReq = axios.get(seaURL);\n           seaReq.then(res => {\n               console.log(res);\n               state.seaCreatures = res.data;\n           });\n       },\n       getSeaCreaturesData: (state) => {\n           return state.seaCreatures\n       }, */\n\n  },\n  extraReducers: {\n    [fetchData.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchData.fulfilled]: (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      state.fish = state.fish.concat(action.payload);\n    },\n    [fetchData.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\nexport const fetchData = createAsyncThunk('data/fetchData', async () => {\n  console.log('fetching');\n  const response = await axios.get('https://acnhapi.com/v1/fish');\n  return response.data;\n});\nexport const {\n  setFishData,\n  getFishData //   setBugData, getBugData, \n  //   setSeaCreaturesData, getSeaCreaturesData \n\n} = dataSlice.actions;\nexport default dataSlice.reducer;","map":{"version":3,"sources":["/Users/annamarinina/Desktop/Critterpedia-JS/src/app/fishData/dataSlice.js"],"names":["createSlice","createAsyncThunk","axios","dataSlice","name","initialState","fish","status","error","reducers","setFishData","state","fishURL","fishReq","get","then","res","console","log","data","getFishData","extraReducers","fetchData","pending","action","fulfilled","concat","payload","rejected","message","response","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAGVC,IAAAA,KAAK,EAAE,IAHG,CAIZ;AACA;;AALY,GAFmB;AASjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAGC,KAAD,IAAW;AACpB,YAAMC,OAAO,GAAG,6BAAhB;AACA,YAAMC,OAAO,GAAGX,KAAK,CAACY,GAAN,CAAUF,OAAV,CAAhB;AACAC,MAAAA,OAAO,CAACE,IAAR,CAAaC,GAAG,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAL,QAAAA,KAAK,CAACL,IAAN,GAAaU,GAAG,CAACG,IAAjB;AACH,OAHD;AAIH,KARK;AASNC,IAAAA,WAAW,EAAGT,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACL,IAAb;AACH;AACJ;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjCc,GATuB;AA4CjCe,EAAAA,aAAa,EAAE;AACX,KAACC,SAAS,CAACC,OAAX,GAAqB,CAACZ,KAAD,EAAQa,MAAR,KAAmB;AACtCb,MAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACD,KAHU;AAIX,KAACe,SAAS,CAACG,SAAX,GAAuB,CAACd,KAAD,EAAQa,MAAR,KAAmB;AACxCb,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf,CADwC,CAExC;;AACAI,MAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWoB,MAAX,CAAkBF,MAAM,CAACG,OAAzB,CAAb;AACD,KARU;AASX,KAACL,SAAS,CAACM,QAAX,GAAsB,CAACjB,KAAD,EAAQa,MAAR,KAAmB;AACvCb,MAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcgB,MAAM,CAAChB,KAAP,CAAaqB,OAA3B;AACD;AAZU;AA5CkB,CAAD,CAA7B;AA4DP,OAAO,MAAMP,SAAS,GAAGrB,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACpEgB,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAMY,QAAQ,GAAG,MAAM5B,KAAK,CAACY,GAAN,CAAU,6BAAV,CAAvB;AACA,SAAOgB,QAAQ,CAACX,IAAhB;AACH,CAJwC,CAAlC;AAMP,OAAO,MAAM;AACTT,EAAAA,WADS;AACIU,EAAAA,WADJ,CAEZ;AACA;;AAHY,IAITjB,SAAS,CAAC4B,OAJP;AAMP,eAAe5B,SAAS,CAAC6B,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const dataSlice = createSlice({\n    name: 'data',\n    initialState: {\n        fish: [],\n        status: 'idle',\n        error: null\n      //  bugs: [],\n      //  seaCreatures: []\n    },\n    reducers: {\n        setFishData: (state) => {\n            const fishURL = 'https://acnhapi.com/v1/fish';\n            const fishReq = axios.get(fishURL);\n            fishReq.then(res => {\n                console.log(res);\n                state.fish = res.data;\n            });\n        },\n        getFishData: (state) => {\n            return state.fish\n        },\n     /*   setBugData: (state) => {\n            const bugURL = 'https://acnhapi.com/v1/bugs';\n            const bugReq = axios.get(bugURL);\n            bugReq.then(res => {\n                console.log(res);\n                state.bugs = res.data;\n            });\n        },\n        getBugData: (state) => {\n            return state.bugs\n        },\n        setSeaCreaturesData: (state) => {\n            const seaURL = 'https://acnhapi.com/v1/sea';\n            const seaReq = axios.get(seaURL);\n            seaReq.then(res => {\n                console.log(res);\n                state.seaCreatures = res.data;\n            });\n        },\n        getSeaCreaturesData: (state) => {\n            return state.seaCreatures\n        }, */\n    },\n    extraReducers: {\n        [fetchData.pending]: (state, action) => {\n          state.status = 'loading'\n        },\n        [fetchData.fulfilled]: (state, action) => {\n          state.status = 'succeeded'\n          // Add any fetched posts to the array\n          state.fish = state.fish.concat(action.payload)\n        },\n        [fetchData.rejected]: (state, action) => {\n          state.status = 'failed'\n          state.error = action.error.message\n        }\n      }\n});\n\nexport const fetchData = createAsyncThunk('data/fetchData', async () => {\n    console.log('fetching')\n    const response = await axios.get('https://acnhapi.com/v1/fish');\n    return response.data;\n})\n\nexport const { \n    setFishData, getFishData, \n //   setBugData, getBugData, \n //   setSeaCreaturesData, getSeaCreaturesData \n} = dataSlice.actions;\n\nexport default dataSlice.reducer;"]},"metadata":{},"sourceType":"module"}