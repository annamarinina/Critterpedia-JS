{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const fetchFishData = createAsyncThunk('data/fetchData', async () => {\n  console.log('fetching');\n  const response = await axios.get('https://acnhapi.com/v1/fish');\n  return response.data;\n});\nexport const dataSlice = createSlice({\n  name: 'data',\n  initialState: {\n    fish: [],\n    status: 'idle',\n    error: null //  bugs: [],\n    //  seaCreatures: []\n\n  },\n  reducers: {\n    /*  setFishData: (state) => {\n          const fishURL = 'https://acnhapi.com/v1/fish';\n          const fishReq = axios.get(fishURL);\n          fishReq.then(res => {\n              console.log(res);\n              state.fish = res.data;\n          });\n      },\n      getFishData: (state) => {\n          return state.fish\n      }, */\n  },\n  extraReducers: {\n    [fetchData.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchData.fulfilled]: (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      state.fish = state.fish.concat(action.payload);\n    },\n    [fetchData.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  setFishData,\n  getFishData //   setBugData, getBugData, \n  //   setSeaCreaturesData, getSeaCreaturesData \n\n} = dataSlice.actions;\nexport default dataSlice.reducer;","map":{"version":3,"sources":["/Users/annamarinina/Desktop/Critterpedia-JS/src/app/fishData/dataSlice.js"],"names":["createSlice","createAsyncThunk","axios","fetchFishData","console","log","response","get","data","dataSlice","name","initialState","fish","status","error","reducers","extraReducers","fetchData","pending","state","action","fulfilled","concat","payload","rejected","message","setFishData","getFishData","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACxEG,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,6BAAV,CAAvB;AACA,SAAOD,QAAQ,CAACE,IAAhB;AACH,CAJ4C,CAAtC;AAMP,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;AACjCU,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAGVC,IAAAA,KAAK,EAAE,IAHG,CAIZ;AACA;;AALY,GAFmB;AASjCC,EAAAA,QAAQ,EAAE;AACR;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXc,GATuB;AAsBjCC,EAAAA,aAAa,EAAE;AACX,KAACC,SAAS,CAACC,OAAX,GAAqB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACD,KAHU;AAIX,KAACI,SAAS,CAACI,SAAX,GAAuB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,MAAN,GAAe,WAAf,CADwC,CAExC;;AACAM,MAAAA,KAAK,CAACP,IAAN,GAAaO,KAAK,CAACP,IAAN,CAAWU,MAAX,CAAkBF,MAAM,CAACG,OAAzB,CAAb;AACD,KARU;AASX,KAACN,SAAS,CAACO,QAAX,GAAsB,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACN,MAAN,GAAe,QAAf;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACN,KAAP,CAAaW,OAA3B;AACD;AAZU;AAtBkB,CAAD,CAA7B;AAsCP,OAAO,MAAM;AACTC,EAAAA,WADS;AACIC,EAAAA,WADJ,CAEZ;AACA;;AAHY,IAITlB,SAAS,CAACmB,OAJP;AAMP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchFishData = createAsyncThunk('data/fetchData', async () => {\n    console.log('fetching')\n    const response = await axios.get('https://acnhapi.com/v1/fish');\n    return response.data;\n})\n\nexport const dataSlice = createSlice({\n    name: 'data',\n    initialState: {\n        fish: [],\n        status: 'idle',\n        error: null\n      //  bugs: [],\n      //  seaCreatures: []\n    },\n    reducers: {\n      /*  setFishData: (state) => {\n            const fishURL = 'https://acnhapi.com/v1/fish';\n            const fishReq = axios.get(fishURL);\n            fishReq.then(res => {\n                console.log(res);\n                state.fish = res.data;\n            });\n        },\n        getFishData: (state) => {\n            return state.fish\n        }, */\n    },\n    extraReducers: {\n        [fetchData.pending]: (state, action) => {\n          state.status = 'loading'\n        },\n        [fetchData.fulfilled]: (state, action) => {\n          state.status = 'succeeded'\n          // Add any fetched posts to the array\n          state.fish = state.fish.concat(action.payload)\n        },\n        [fetchData.rejected]: (state, action) => {\n          state.status = 'failed'\n          state.error = action.error.message\n        }\n      }\n});\n\nexport const { \n    setFishData, getFishData, \n //   setBugData, getBugData, \n //   setSeaCreaturesData, getSeaCreaturesData \n} = dataSlice.actions;\n\nexport default dataSlice.reducer;"]},"metadata":{},"sourceType":"module"}