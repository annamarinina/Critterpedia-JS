{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const fetchData = createAsyncThunk('data/fetchData', async () => {\n  console.log('fetching');\n  const response = await axios.get('https://acnhapi.com/v1/bugs');\n  return response.data;\n});\nexport const dataSlice = createSlice({\n  name: 'data',\n  initialState: {\n    bugs: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    /* setBugData: (state) => {\n         const fishURL = 'https://acnhapi.com/v1/fish';\n         const fishReq = axios.get(fishURL);\n         fishReq.then(res => {\n             console.log(res);\n             state.fish = res.data;\n         });\n     },\n     getBugData: (state) => {\n         return state.bugs\n     } */\n  },\n  extraReducers: {\n    [fetchData.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchData.fulfilled]: (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      state.fish = state.fish.concat(action.payload);\n    },\n    [fetchData.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  setBugData,\n  getBugData\n} = dataSlice.actions;\nexport default dataSlice.reducer;","map":{"version":3,"sources":["/Users/annamarinina/Desktop/Critterpedia-JS/src/app/bugData/dataSlice.js"],"names":["createSlice","createAsyncThunk","axios","fetchData","console","log","response","get","data","dataSlice","name","initialState","bugs","status","error","reducers","extraReducers","pending","state","action","fulfilled","fish","concat","payload","rejected","message","setBugData","getBugData","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACpEG,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,6BAAV,CAAvB;AACA,SAAOD,QAAQ,CAACE,IAAhB;AACH,CAJwC,CAAlC;AAMP,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;AACjCU,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFmB;AAOjCC,EAAAA,QAAQ,EAAE;AACP;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXc,GAPuB;AAoBjCC,EAAAA,aAAa,EAAE;AACX,KAACb,SAAS,CAACc,OAAX,GAAqB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAHU;AAIX,KAACV,SAAS,CAACiB,SAAX,GAAuB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf,CADwC,CAExC;;AACAK,MAAAA,KAAK,CAACG,IAAN,GAAaH,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAkBH,MAAM,CAACI,OAAzB,CAAb;AACD,KARU;AASX,KAACpB,SAAS,CAACqB,QAAX,GAAsB,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACL,MAAN,GAAe,QAAf;AACAK,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACL,KAAP,CAAaW,OAA3B;AACD;AAZU;AApBkB,CAAD,CAA7B;AAoCP,OAAO,MAAM;AACTC,EAAAA,UADS;AACGC,EAAAA;AADH,IAETlB,SAAS,CAACmB,OAFP;AAIP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchData = createAsyncThunk('data/fetchData', async () => {\n    console.log('fetching')\n    const response = await axios.get('https://acnhapi.com/v1/bugs');\n    return response.data;\n})\n\nexport const dataSlice = createSlice({\n    name: 'data',\n    initialState: {\n        bugs: [],\n        status: 'idle',\n        error: null\n    },\n    reducers: {\n       /* setBugData: (state) => {\n            const fishURL = 'https://acnhapi.com/v1/fish';\n            const fishReq = axios.get(fishURL);\n            fishReq.then(res => {\n                console.log(res);\n                state.fish = res.data;\n            });\n        },\n        getBugData: (state) => {\n            return state.bugs\n        } */\n    },\n    extraReducers: {\n        [fetchData.pending]: (state, action) => {\n          state.status = 'loading'\n        },\n        [fetchData.fulfilled]: (state, action) => {\n          state.status = 'succeeded'\n          // Add any fetched posts to the array\n          state.fish = state.fish.concat(action.payload)\n        },\n        [fetchData.rejected]: (state, action) => {\n          state.status = 'failed'\n          state.error = action.error.message\n        }\n      }\n});\n\nexport const { \n    setBugData, getBugData\n} = dataSlice.actions;\n\nexport default dataSlice.reducer;"]},"metadata":{},"sourceType":"module"}